include_directories(${CMAKE_BINARY_DIR})
include_directories(".")
include_directories("${PROJECT_SOURCE_DIR}/common/include/")
include_directories("${PROJECT_SOURCE_DIR}/lower_level/include/")
include_directories("${PROJECT_SOURCE_DIR}/third_party/qpOASES/include/")
include_directories("${PROJECT_SOURCE_DIR}/third_party/ParamYaml/")
include_directories("${PROJECT_SOURCE_DIR}/third_party/ParamYaml/dynacore_yaml-cpp/")
include_directories("${PROJECT_SOURCE_DIR}/mid_level/include/")
include_directories("${PROJECT_SOURCE_DIR}/third_party/EphCan/include")
include_directories("${PROJECT_SOURCE_DIR}/api_sdk/include/")
file(GLOB_RECURSE libsources_api "${PROJECT_SOURCE_DIR}/api_sdk/lib/*.so")
include_directories("${PROJECT_SOURCE_DIR}/upper_level/include/")
include_directories("${PROJECT_SOURCE_DIR}/task/include/")
include_directories("${PROJECT_SOURCE_DIR}/opt_ctrl/include/")

include_directories("${PROJECT_SOURCE_DIR}/wbc/CommonWbc/include")
include_directories(${CMAKE_BINARY_DIR})
include_directories("${PROJECT_SOURCE_DIR}/wbc/CommonWbc")
include_directories("${PROJECT_SOURCE_DIR}/sim/include/comm_sim/ControlParameters")
include_directories("${PROJECT_SOURCE_DIR}/sim/include/comm_sim/Utilities")
include_directories("${PROJECT_SOURCE_DIR}/sim/include/comm_sim/SimUtilities")
include_directories("${PROJECT_SOURCE_DIR}/sim/include/comm_sim/Collision")
include_directories("${PROJECT_SOURCE_DIR}/sim/include/comm_sim")
include_directories("${PROJECT_SOURCE_DIR}/sim/include")
#include_directories("${PROJECT_SOURCE_DIR}/opt_ctrl/include/")
#include_directories("${PROJECT_SOURCE_DIR}/opt_ctrl/include/")

#include_directories("/usr/include/eigen3")
#file(GLOB_RECURSE libsources "${PROJECT_SOURCE_DIR}/lower_level/lib/*.a")
set(CMAKE_COLOR_MAKEFILE   ON)
#set(CMAKE_EXE_LINKER_FLAGS "-static")
#set(Torch_DIR /home/oifgjhk/Project/libtorch/share/cmake/Torch)
#find_package(Torch REQUIRED)
#include_directories("${TORCH_INCLUDE_DIRS}")

file(GLOB_RECURSE sources
"./*.cpp")
aux_source_directory(. SRC_LIST)
add_executable(dog_sim ${SRC_LIST})
target_link_libraries(dog_sim xp_task_lib xp_lower_level_lib qpOASES xp_mpc_lib xp_sim_lib)
target_link_libraries(dog_sim xp_mid_level_lib xp_common_lib pthread rt)
target_link_libraries(dog_sim ${libsources})
target_link_libraries(dog_sim ${libsources_api})
#设置可执行文件生成路径 工程bin目录下
SET(EXECUTABLE_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/)
