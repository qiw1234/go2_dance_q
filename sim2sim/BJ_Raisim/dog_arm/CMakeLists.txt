cmake_minimum_required(VERSION 2.8)
project(Dog_arm)

add_definitions(-DQT_NO_VERSION_TAGGING)
#SET(CMAKE_BUILD_TYPE:STRING "Debug")
SET(CMAKE_BUILD_TYPE "debug")
SET(CMAKE_CXX_FLAGS_DEBUG   "$ENV{CXXFLAGS} -O0 -Wall -g2 -ggdb -FPIC ")
SET(CMAKE_CXX_FLAGS_RELEASE "$ENV{CXXFLAGS} -O3 -Wall -FPIC ")


option(SIM_ENABLE "SIM_ENABLE" ON)
add_definitions(-DEIGEN_STACK_ALLOCATION_LIMIT=0)
ADD_DEFINITIONS(-D_USE_WJ=0)
#ADD_DEFINITIONS(-D__USE_SINGLE_PRECISION__=1)
if(SIM_ENABLE)
    ADD_DEFINITIONS(-D_USE_SIM=1)
else(SIM_ENABLE)
    #ADD_DEFINITIONS(-D_USE_SIM=0)
endif(SIM_ENABLE)

option(JUMPXP_ENABLE "JUMPXP_ENABLE" OFF)

if(JUMPXP_ENABLE)
    ADD_DEFINITIONS(-D_JUMPXP_EN=1)
else(JUMPXP_ENABLE)
    #ADD_DEFINITIONS(-D_WHEEL_EN=0)
endif(JUMPXP_ENABLE)

option(WHEEL_ENABLE "WHEEL_ENABLE" OFF)

if(WHEEL_ENABLE)
    ADD_DEFINITIONS(-D_WHEEL_EN=1)
else(WHEEL_ENABLE)
    #ADD_DEFINITIONS(-D_WHEEL_EN=0)
endif(WHEEL_ENABLE)

option(DRIVER_TASK_RECORD "DRIVER_TASK_RECORD" ON)

if(DRIVER_TASK_RECORD)
    ADD_DEFINITIONS(-D_DRIVER_TASK_RECORD=0)
else(DRIVER_TASK_RECORD)
    #ADD_DEFINITIONS(-D_FOOT_ANKLE_EN=0)
endif(DRIVER_TASK_RECORD)


option(FOOT_ANKLE_ENABLE "FOOT_ANKLE_ENABLE" OFF)

if(FOOT_ANKLE_ENABLE)
    ADD_DEFINITIONS(-D_FOOT_ANKLE_EN=1)
else(FOOT_ANKLE_ENABLE)
    #ADD_DEFINITIONS(-D_FOOT_ANKLE_EN=0)
endif(FOOT_ANKLE_ENABLE)

option(SIM_ARM_ENABLE "SIM_ARM_ENABLE" OFF)

if(SIM_ARM_ENABLE)
    ADD_DEFINITIONS(-D_USE_ARM)
    ADD_DEFINITIONS(-D_DOF_ARM=6)
    ADD_DEFINITIONS(-D_NUM_ARM_SPI=2)
endif(SIM_ARM_ENABLE)

option(USING_THREAD_SOLVE_ENABLE "USING_THREAD_SOLVE_ENABLE" OFF)

if(USING_THREAD_SOLVE_ENABLE)
    ADD_DEFINITIONS(-DUSING_THREAD_SOLVE=1)
else(USING_THREAD_SOLVE_ENABLE)
    ADD_DEFINITIONS(-DUSING_THREAD_SOLVE=0)
endif(USING_THREAD_SOLVE_ENABLE)



option(LEARNING_XD_ENABLE "LEARNING_XD_ENABLE" OFF)

if(LEARNING_XD_ENABLE)
    ADD_DEFINITIONS(-D_XD_EN=1)
else(LEARNING_XD_ENABLE)
    #ADD_DEFINITIONS(-D_XD_EN=0)
endif(LEARNING_XD_ENABLE)

option(LEARNING_TC_ENABLE "LEARNING_TC_ENABLE" OFF)

if(LEARNING_TC_ENABLE)
    ADD_DEFINITIONS(-D_TC_EN=1)
else(LEARNING_TC_ENABLE)
    #ADD_DEFINITIONS(-D_TC_EN=0)
endif(LEARNING_TC_ENABLE)

option(TWO_RAISIMDOG_ENABLE "TWO_RAISIMDOG_ENABLE" ON)
if(TWO_RAISIMDOG_ENABLE)
    ADD_DEFINITIONS(-D_TWODOG_EN=1)
endif(TWO_RAISIMDOG_ENABLE)

option(USE_ARX_ARM "USE_ARX_ARM" ON)
if(USE_ARX_ARM)
    ADD_DEFINITIONS(-D_ARX_ARM_EN=1)
endif(USE_ARX_ARM)

option(USING_RAISIM_ENABLE "USING_RAISIM_ENABLE" ON)
if(USING_RAISIM_ENABLE)
    ADD_DEFINITIONS(-D_RAISIM_EN=1)
    ADD_DEFINITIONS(-D_USE_ANKLE=0)
    ADD_DEFINITIONS(-D_N_JOINTS=3)
    ADD_DEFINITIONS(-D_N_FORCES=3)

    ADD_DEFINITIONS(-D_USE_TUO=0)
    ADD_DEFINITIONS(-D_USE_TUO4=0)
    ADD_DEFINITIONS(-D_ACTIVE=0)
    ADD_DEFINITIONS(-D_USE_GUN=0)
    ADD_DEFINITIONS(-D_LOW_GUN=1)

    ADD_DEFINITIONS(-D_USE_ARM_Raisim=0)
    ADD_DEFINITIONS(-D_USE_ARM_SIM=0)
    ADD_DEFINITIONS(-D_N_JOINTS_ARM=6)

    ADD_DEFINITIONS(-D_GOAT=0)


    ADD_DEFINITIONS(-D_USE_MPC_STAND=0)
else(USING_RAISIM_ENABLE)
    ADD_DEFINITIONS(-D_N_JOINTS=3)
    #ADD_DEFINITIONS(-D_RAISIM_EN=0)
endif(USING_RAISIM_ENABLE)
ADD_DEFINITIONS(-D_MAX_HORIZON=30)

option(USING_CASADI_ENABLE "USING_CASADI_ENABLE" OFF)
if(USING_CASADI_ENABLE)
    ADD_DEFINITIONS(-D_CASADI_EN=1)
else(USING_CASADI_ENABLE)
    #ADD_DEFINITIONS(-D_CASADI_EN=0)
endif(USING_CASADI_ENABLE)


option(AUTO_FLAG ON)

SET (THIS_COM "../" )
CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/config.h.cmake
  ${CMAKE_BINARY_DIR}/Configuration.h)
#--------------------------------std::thread nullptr error
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -std=gnu++0x")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++0x")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -pthread")
#set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++14")
if ("${CMAKE_SOURCE_DIR}" STREQUAL "${CMAKE_BINARY_DIR}")
  message(SEND_ERROR "In-source builds are not allowed.")
endif ()
include_directories("/usr/include/eigen3/")
set(CMAKE_COLOR_MAKEFILE ON)
set(CMAKE_CXX_STANDARD 14)

set(Qt5Core_DIR /home/pcpc/Qt/5.15.0/gcc_64/lib/cmake/Qt5Core)
find_package(Qt5Core CONFIG REQUIRED)

add_subdirectory(common)

add_subdirectory(third_party)

add_subdirectory(task)
add_subdirectory(user)
add_subdirectory(Dynamics_party)
add_subdirectory(sim)

